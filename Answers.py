# -*- coding: utf-8 -*-
"""Answers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NcBqu4E43ZY8DE0O8xBb01WawZqVlpQP
"""

from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
import re
import sys

MODEL_NAME = "gpt2-large"

def get_pipeline(model_name=MODEL_NAME, use_gpu=False):
    """
    Load tokenizer and model, return a text-generation pipeline.
    Uses EOS token as pad token if none exists (gpt2).
    """
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForCausalLM.from_pretrained(model_name)
    if tokenizer.pad_token is None:
        tokenizer.pad_token = tokenizer.eos_token
    device = 0 if use_gpu else -1
    pipe = pipeline("text-generation", model=model, tokenizer=tokenizer, device=device)
    return pipe

def generate(pipe, prompt, max_new_tokens=40, do_sample=False, temperature=1.0):
    """
    Generate continuation text after prompt. Returns the generated suffix (not including the prompt).
    Deterministic by default (do_sample=False).
    """
    out = pipe(prompt, max_new_tokens=max_new_tokens, do_sample=do_sample, temperature=temperature)
    full_text = out[0]["generated_text"]
    if full_text.startswith(prompt):
        return full_text[len(prompt):].strip()
    return full_text.strip()

# ----------------------
# TASK 1: Binary sentiment classification
# ----------------------
def evaluate_sentiment(pipe):
    print("\n" + "="*12 + " TASK 1: BINARY SENTIMENT " + "="*12 + "\n")
    instruction = "Do the following texts express a positive or negative sentiment?\n\n"

    tests = [
        ("I absolutely loved the movie, it kept me on the edge of my seat!", "Positive"),
        ("The food was cold and the service was terrible. I will not return.", "Negative"),
        ("The concert was okay, not great but not terrible either.", "Negative")
    ]

    # zero-shot
    print("Zero-shot:")
    for text, expected in tests:
        prompt = instruction + f'Text: "{text}"\nAnswer:'
        completion = generate(pipe, prompt, max_new_tokens=12, do_sample=False)
        out = completion.splitlines()[0].strip()
        verdict = "CORRECT" if expected.lower() in out.lower() else "INCORRECT"
        print(f"- Text: {text}")
        print(f"  Model output: {out!r}")
        print(f"  Expected: {expected} - {verdict}\n")

    # one-shot
    print("One-shot:")
    one_shot = 'Text: "I had a wonderful time at the concert, the band was amazing."\nAnswer: Positive\n\n'
    for text, expected in tests:
        prompt = instruction + one_shot + f'Text: "{text}"\nAnswer:'
        completion = generate(pipe, prompt, max_new_tokens=12, do_sample=False)
        out = completion.splitlines()[0].strip()
        verdict = "CORRECT" if expected.lower() in out.lower() else "INCORRECT"
        print(f"- Text: {text}")
        print(f"  Model output: {out!r}")
        print(f"  Expected: {expected} - {verdict}\n")

    # two-shot
    print("Two-shot:")
    two_shot = (
        'Text: "The new phone exceeded my expectations, battery lasts all day."\nAnswer: Positive\n\n'
        'Text: "The laptop arrived with a cracked screen and does not turn on."\nAnswer: Negative\n\n'
    )
    for text, expected in tests:
        prompt = instruction + two_shot + f'Text: "{text}"\nAnswer:'
        completion = generate(pipe, prompt, max_new_tokens=12, do_sample=False)
        out = completion.splitlines()[0].strip()
        verdict = "CORRECT" if expected.lower() in out.lower() else "INCORRECT"
        print(f"- Text: {text}")
        print(f"  Model output: {out!r}")
        print(f"  Expected: {expected} - {verdict}\n")

# ----------------------
# TASK 2: Person name recognition
# ----------------------
def evaluate_names(pipe):
    print("\n" + "="*12 + " TASK 2: PERSON NAME RECOGNITION " + "="*12 + "\n")
    instruction = "List the person names occurring in the following texts.\n\n"

    tests = [
        ("Alice and Bob went to the market together.", ["Alice", "Bob"]),
        ("Dr. Sarah Connor met with John Wick and Mary.", ["Sarah", "Connor", "John", "Wick", "Mary"]),
        ("Michael Jordan and LeBron James are famous basketball players.", ["Michael", "Jordan", "LeBron", "James"])
    ]

    # zero-shot
    print("Zero-shot:")
    for text, expected in tests:
        prompt = instruction + f'Text: "{text}"\nNames:'
        completion = generate(pipe, prompt, max_new_tokens=30, do_sample=False)
        output = completion.strip()
        guessed = re.split(r"[,\n]| and | & ", output)
        guessed = [g.strip().strip('.') for g in guessed if g.strip()]
        print(f"Text: {text}")
        print(f"Model output: {output!r}")
        ok = all(any(e.lower() in g.lower() for g in guessed) for e in expected)
        print(f"Expected contains: {expected} - {'CORRECT' if ok else 'INCORRECT'}\n")

    # one-shot
    print("One-shot:")
    one = 'Text: "Michael Jordan and Scottie Pippen played well."\nNames: Michael Jordan, Scottie Pippen\n\n'
    for text, expected in tests:
        prompt = instruction + one + f'Text: "{text}"\nNames:'
        completion = generate(pipe, prompt, max_new_tokens=30, do_sample=False)
        output = completion.strip()
        guessed = re.split(r"[,\n]| and | & ", output)
        guessed = [g.strip().strip('.') for g in guessed if g.strip()]
        print(f"Text: {text}")
        print(f"Model output: {output!r}")
        ok = all(any(e.lower() in g.lower() for g in guessed) for e in expected)
        print(f"Expected contains: {expected} - {'CORRECT' if ok else 'INCORRECT'}\n")

    # two-shot
    print("Two-shot:")
    two = (
        'Text: "Elizabeth Bennet danced with Mr. Darcy."\nNames: Elizabeth Bennet, Mr. Darcy\n\n'
        'Text: "Harry Potter spoke with Hermione Granger."\nNames: Harry Potter, Hermione Granger\n\n'
    )
    for text, expected in tests:
        prompt = instruction + two + f'Text: "{text}"\nNames:'
        completion = generate(pipe, prompt, max_new_tokens=30, do_sample=False)
        output = completion.strip()
        guessed = re.split(r"[,\n]| and | & ", output)
        guessed = [g.strip().strip('.') for g in guessed if g.strip()]
        print(f"Text: {text}")
        print(f"Model output: {output!r}")
        ok = all(any(e.lower() in g.lower() for g in guessed) for e in expected)
        print(f"Expected contains: {expected} - {'CORRECT' if ok else 'INCORRECT'}\n")

# ----------------------
# TASK 3: Two-digit addition
# ----------------------
def evaluate_addition(pipe):
    print("\n" + "="*12 + " TASK 3: TWO-DIGIT ADDITION " + "="*12 + "\n")
    instruction = "This is a first grade math exam. Compute the sum.\n\n"

    tests = [
        ("11 + 22 =", 33),
        ("47 + 28 =", 75),
        ("34 + 56 =", 90)
    ]

    # zero-shot
    print("Zero-shot:")
    for expr, expected in tests:
        prompt = instruction + f"Question: {expr}\nAnswer:"
        completion = generate(pipe, prompt, max_new_tokens=10, do_sample=False)
        nums = re.findall(r"-?\d+", completion)
        guessed = int(nums[0]) if nums else None
        print(f"Prompt: {expr}")
        print(f"Model output: {completion!r}")
        print(f"Expected: {expected} - {'CORRECT' if guessed == expected else f'INCORRECT (guessed={guessed})'}\n")

    # one-shot
    print("One-shot:")
    one = "Question: 12 + 23 =\nAnswer: 35\n\n"
    for expr, expected in tests:
        prompt = instruction + one + f"Question: {expr}\nAnswer:"
        completion = generate(pipe, prompt, max_new_tokens=10, do_sample=False)
        nums = re.findall(r"-?\d+", completion)
        guessed = int(nums[0]) if nums else None
        print(f"Prompt: {expr}")
        print(f"Model output: {completion!r}")
        print(f"Expected: {expected} - {'CORRECT' if guessed == expected else f'INCORRECT (guessed={guessed})'}\n")

    # two-shot
    print("Two-shot:")
    two = "Question: 10 + 15 =\nAnswer: 25\n\nQuestion: 33 + 11 =\nAnswer: 44\n\n"
    for expr, expected in tests:
        prompt = instruction + two + f"Question: {expr}\nAnswer:"
        completion = generate(pipe, prompt, max_new_tokens=10, do_sample=False)
        nums = re.findall(r"-?\d+", completion)
        guessed = int(nums[0]) if nums else None
        print(f"Prompt: {expr}")
        print(f"Model output: {completion!r}")
        print(f"Expected: {expected} - {'CORRECT' if guessed == expected else f'INCORRECT (guessed={guessed})'}\n")

# ----------------------
# Main
# ----------------------
def main():
    use_gpu = False
    print("Loading model")
    pipe = get_pipeline(MODEL_NAME, use_gpu=use_gpu)

    evaluate_sentiment(pipe)
    evaluate_names(pipe)
    evaluate_addition(pipe)


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print("An error occurred while running the script:", file=sys.stderr)
        print(str(e), file=sys.stderr)
        sys.exit(1)